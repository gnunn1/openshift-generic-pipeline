---
- name: Set ephemeral or persistent
  set_fact:
    jenkins_template: jenkins-ephemeral
  when: not jenkins_persistent

- name: Set ephemeral or persistent
  set_fact:
    jenkins_template: jenkins-persistent
  when: jenkins_persistent

- name: Login in OpenShift
  shell: "oc login --insecure-skip-tls-verify=true -u {{ username }} -p {{ password }} {{ openshift_master }}"

- name: Create cicd OpenShift project
  shell: "oc new-project {{project_prefix}}-cicd --display-name='{{display_prefix}} CI/CD'"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"

# - name: Create Environments
#   k8s_raw:
#     state: present
#     definition:
#       apiVersion: project.openshift.io/v1
#       kind: ProjectRequest
#       displayName: "{{display_prefix}} {{item.display}}"
#       metadata:
#         name: "{{project_prefix}}-{{item.name}}"
#   with_items:
#     - name: cicd
#       display: CI/CD
#     - name: dev
#       display: Development
#     - name: test
#       display: Test

- name: Create jenkins app
  shell: "oc new-app {{ jenkins_template }} -n {{project_prefix}}-cicd"
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"

- name: Create Environments
  shell: |
    oc new-project {{project_prefix}}-dev --display-name="{{display_prefix}} Development"
    oc new-project {{project_prefix}}-test --display-name="{{display_prefix}} Test"
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"

- name: Give jenkins SA access to dev
  shell: "oc policy add-role-to-user edit system:serviceaccount:{{project_prefix}}-cicd:jenkins -n {{item}}"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  with_items:
    - "{{project_prefix}}-dev"
    - "{{project_prefix}}-test"

# - name: Enable test environment to pull images from dev
#   shell: "oc policy add-role-to-group system:image-puller system:serviceaccounts:{{project-prefix}}-test -n {{project-prefix}}-dev"
#   register: command_result
#   failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
#   changed_when: "'exists' not in command_result.stderr"

# - name: Install application template
#   shell: "oc create -f {{template_url}} -n {{project_prefix}}-dev"
#   ignore_errors: true

- name: Create application in environments
  shell: |
    oc process -f {{template_url}} {{template_params}}| oc create -n {{project_prefix}}-{{item}} -f -
    oc cancel-build bc/{{app_name}} -n {{project_prefix}}-{{item}}
    oc set triggers dc {{app_name}} --containers='{{app_name}}' --from-image='{{app_name}}:latest' --manual=true -n {{project_prefix}}-{{item}}
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  with_items:
    - "dev"
    - "test"

- name: Update test imagePullPolicy
  shell: "oc patch dc/{{app_name}} -p '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"{{app_name}}\",\"imagePullPolicy\":\"Always\"}]}}}}'"

- name: Determine git repo
  shell: "oc get bc/{{app_name}} -n {{project_prefix}}-dev -o jsonpath='{.spec.source.git.uri}'"
  register: result

- name: Store git repo
  set_fact:
    git_repo: "{{result.stdout}}"

- name: Determine git ref
  shell: "oc get bc/{{app_name}} -n {{project_prefix}}-dev -o jsonpath='{.spec.source.git.ref}'"
  register: result

- name: Store git ref
  set_fact:
    git_ref: "{{result.stdout}}"

- name: create temporary file
  tempfile:
    state: file
    suffix: yml
  register: templatedPipeline

- name: Pipeline template
  template:
    src: "../files/pipeline.yml"
    dest: "{{templatedPipeline.path}}"

- name: Create Pipeline
  shell: "oc create -f {{templatedPipeline.path}} -n {{project_prefix}}-cicd"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"

- name: Waiting for jenkins to be ready
  command: curl -k --head --silent https://jenkins-{{project_prefix}}-cicd.{{ openshift_domain }}/login
  register: result
  until: result.stdout.find("200 OK") != -1
  retries: 30
  delay: 5
  changed_when: false

- name: Wait for Jenkins to initialize
  pause:
    seconds: 10

- name: Starting Pipeline
  shell: "oc start-build {{project_prefix}}-pipeline -n {{project_prefix}}-cicd"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"